0. Visual Studio Code 
(1) 한글화
	1) korean으로 검색
	2) Korean Language Pack for Visual Studio Code 설치
(2) 브라우저에 출력
	1) live server로 검색 후 설치

1. HTML(Hyper Text Markup Language)
	- https://w3schools.com
------------------------------------------------
(1) 용도 : 문서의 구조를 설정
(2) History : 구글 검색
	1) 버전
		- HTML 4.x
		- XHTML
		- HTML 5
(3) 웹 제작시 고려할 사항
	- 웹 표준
	- 웹 접근성
	- 크로스 브라우징
(4) 문법
	- 주석 처리 : <!-- 컨텐츠 -->
	1) 태그의 기본 구조
		<열린태그 속성="속성값">컨텐츠</닫힌태그>
		<열린태그></닫힌태그> , <열린태그 />
	2) 문서의 기본 구조
		<!DOCTYPE html>
		<html>
			<head>
				다양한 메타정보나 선언부 
			</head>

			<body>
				화면에 보여질 본문 내용
			</body>
		</html>
	3) 태그의 종류
		1) <head></head>
			- <title></title>
			- <meta></meta>
				
		2) 글자 꾸미기
			- test2.html

		3) 이미지
			- jpg(jpeg)
				압축률이 뛰어나다(용량이 작다)
				여러 번 반복 저장하게 되면 손실율이 매우 높아진다.
			- png
				git 대체 포맷
				비손실 압축
				투명도 지원
			- gif
				비손실 압축
				8비트 색상만 지원
				여러 장의 이미지를 하나의 파일로 묶을 수 있다.
			- webp
				jpg, png, gif를 모두 대체할 수 있는 구글에서 개발한 이미지 포맷
			- test3.html
			
			※ 경로(path)
				- 상대 경로
				- 절대 경로
					- 로컬 경로
					- 가상 경로
		4) 하이퍼 링크
			※ URL(Uniform Resource Locator)
				URL은 네트워크 상에서 자원이 어디 있는지를 알려주기 위한 규약이다. 
				즉, 컴퓨터 네트워크와 검색 메커니즘에서의 위치를 지정하는, 
				웹 리소스에 대한 참조이다. 쉽게 말해서, 웹 페이지를 찾기위한 주소를 말한다.
			- 형식
				프로토콜명://도메인주소:포트번호/폴더명/파일명#세부위치
				http://
				https://
			- test4.html
		5) 테이블
			- test5.html
		6) Input Type : 폼 태그
			- test6.html

=====================================================================

2. CSS (Cascading Style Sheet)
(1) 개요
	1) 버전 
		css 1.x -> css 2.x -> css 3.x -> css 4.x

	2) 목적
		- 디자인(HTML 등)의 효과적인 관리(유지보수 등...)
		- 웹 표준화(Cross Browsing)

(2) 사용 방법
	1) External Style
		- 별도의 .css파일을 만들어서 호출하여 사용하는 방식
	2) Inline Style
		- 태그 안에서 직접 사용하는 방식
		- style 이라는 속성을 이용
	3) Internal Style
		- 하나의 페이지에 단 한번만 정의함으로써 같은 페이지내에서는 동일한 디자인을 재사용할 수 있다.
	4) Import Style
		- 외부의 css파일간의 연결(직렬)

(3) 문법
	선택자(Selector) { 속성 : 값 ; 속성 : 값 ; }

	1) 선택자(Selector)
		a) 기본 선택자
			- * (전체 선택자)
			- 태그 선택자 : 태그 이름으로 선택
			- 클래스 선택자 : 태그의 class 속성의 값으로 선택 ( . 표시)
			- 아이디 선택자 : 태그의 id 속성의 값으로 선택 (# 표시)
	
		b) 복합 선택자
			- 일치 선택자(Basic Combinator) : 태그.클래스명
			- 자식 선택자(Child Combinator) : 태그 > .클래스명
			- 하위(후손) 선택자(Descendant Combinator) : 태그 .클래스명
			- 인접 형제 선택자(Adjacent Sibling Combinator) : 태그.클래스명 + 태그명
			- 일반 형제 선택자(General Sibling Combinator) : 태그.클래스명 ~ 태그명

		c) 가상 클래스 선택자(Pseudo Classes Selector) - " : " 을 사용
			- hover : 마우스 커서가 올라가 있는 동안 선택
			- active : 마우스를 클릭하고 있는 동안 선택
			- focus : 포커싱이 되면 선택
				input, a, button, label, select 등 주로 대화형 컨텐츠들
			- first-child
			- last-child
			- nth-child
			- not

		d) 가상 요소 선택자(Pseudo Elements Selector) - " :: " 을 사용, 컨텐츠 추가
			- before
			- after

		e) 속성 선택자(Attribute Selector)
			[속성명] { ... }
			[속성=값] { ... }

	2) 디자인 속성
		- Font 관련 (font, line)
		- 색상 및 이미지 관련 (color, background)
		- 텍스트 관련(text, line)
		- 여백(margin, padding, border)
	
	3) 스타일 상속
		- 현재 요소의 스타일이 자식이나 하위 요소에까지 영향을 미치는 것을 말한다.
		- 주로 글자/문자 관련 속성들이 상속된다.(font, text 관련)

	4) Block 요소와 Inline 요소
		a) Block 요소
			- 줄바꿈 현상이 나타남
			- width/height 값 사용 가능(공간 만들기 기능)
			- margin과 padding 값 사용 가능(상하 배치 작업 가능)
			- inline요소를 포함할 수 있다.
			- <div>, <p>, <h>, <ul>, ...

		b) Inline 요소
			- 줄바꿈 현상이 없다
			- width/height 값 적용 불가
			- margin/padding/bottom 값 적용 불가(좌우 여백은 가능)
			- block요소를 포함할 수 없다
			- <img>, <a>, <span>, ...

		※ <input> : block과 inline 두 가지 특징을 모두 가지고 있다.

(4) 디자인 속성
	1) width, height
		- width는 자동으로 크기가 설정된다.

	2) margin, padding
		margin : top, right, bottom, left
		margin : [top, bottom] [left, right]
		margin : [top] [left, right] [bottom]
		margin : [top right bottom left]

	3) border
		border : 선-두께  선-종류  선-색상
		border-width, border-style, border-color

	4) 크기 계산 : box-sizing
		- content-box (기본값)
		- border-box

	5) 넘침 제어 : overflow
		- visible : 넘친 내용을 그대로 보여줌
		- hidden : 넘친 내용을 잘라냄
		- auto : 넘친 내용이 있을 경우에만 잘라내고 스크롤바 생성
		- scroll
	
	6) 출력 : display
		- block, inline, inline-block
		- flex(1차원), grid(2차원), none(화면에서 사라짐)
		- table, table-cell, table-row, ...

	7) 배경 : background
		- background-image: url("경로")

	8) 배치
		a) 기준점 : position
			- static (기본값)
			- relative : 요소 자신을 기준
			- absolute : 위치상 부모 요소를 기준
			- fixed : 뷰포트(브라우저) 기준 ( 화면 고정 효과가 있다.)

		b) 방향 지정 : top, bottom, right, left
			- auto : 브라우저가 자동으로 계산
			- 숫자값 지정 : px, em, rem 단위 사용

		c) Stack Order(요소 쌓임 순서) : z-index
			- 요소에 postion 속성의 값이 있는 경우 위에 쌓임(static은 제외)
			- 위의 조건이 같은 경우 z-index의 숫자값이 높을 수록 위에 쌓임
			- 위의 모든 조건 같은 경우 HTML의 다음 구조일 수록 위에 쌓임

		d) position의 값으로 absolute, fixed가 지정된 요소는, display 속성이 block으로 변경됨.

		e) flex(정렬) : 1차원 레이아웃
			- Flex Container
				- display
				- flex-direction
				- flex-wrap
				- justify-content
				- align-content
				- align-items
			- Flex Items
				- order
				- flex-grow
				- flex-shrink
				- flex-basis

	
	9) 전환 : transition
		transition : 속성명  지속시간  타이밍함수   대기시간; 



	10) 변환 : transform
		transform : 변환함수1  변환함수2   변환함수3 ...;
			원근법 이동 크기 회전 기울임 
		- 2D 변환함수
		- 3D 변환함수

==================================================================================
3. JavaScript
	- 스크립트 언어
	- 객체 기반 언어
(1) 사용 방법
	1) inline 방식
	2) internal 방식
	3) external 방식

※ 주석 처리
	// : 한 줄 주석
	/* ~ */ : 여러 줄 주석
			
※ 변수 표기법
	- dash-case(kebab-case)
		the-quick-brown-fox
	- snake_case (HTML, CSS)
		the_quick_brown_fox
	- camelCase (JS)
		theQuickBrownFox
	- PascalCase (JS)
		TheQuickBrownFox

※ Zero Based Numbering

(2) 문법
	1) 변수 : 임시 기억(저장) 장소
		- 변수 선언 방법
			var
			let
			const

	2) 자료형(DataType)
		- String
		- Number
		- Boolean
		- Undefined
		- Null
		- Object
		- Array
		- Function

	3) 기본 연산자(Operator)
		- 산술 연산자
			*   /   +   -   %   ++   --
		- 비교 연산자
			>   <   >=   <=   ==  ===   !=  !==
		- 논리 연산자
			&&(and)   ||(or)   !(not)
			======================
			a     b	a&&b	a||b	!a
			---------------------------------------
			T     T	   T	 T	F
			T     F	   F          T	F
			F     T        F          T	T
			F     F        F          F	T

		※ false를 의미하는 자료형
			- false
			- 0
			- null, undefined, NaN
			- ''

		- 할당(대입, 치환) 연산자
			=   +=   -=   *=   /=  ...	
	
		※ 연산자의 우선순위는 항상 ( )를 사용하는 습관을 들이자.

	4) 확장된 연산자
		- Nullish 병합 연산자
		- 삼항 연산자
		- 전개 연산자
			... 을 이용하여 [ ]을 제거하는 역할
		- 구조 분해 할당 연산자

	5) 제어문
		- 조건문
			if (조건문) { 
				실행할 코드 
			}
			-------------------------
			if (조건문) { 
				실행할 코드 
			} else {
				실행할 코드
			}
			--------------------------
			if (조건문) { 
				실행할 코드 
			} else if (조건문) {
				실행할 코드
			} else if (조건문) {
				실행할 코드
			}
			...
			---------------------------
			switch (변수 또는 상수 또는 수식) {
				case 값:
					실행할 코드
					break;
				case 값:
					실행할 코드
					break
				...
				default:
					실행할 코드
			}


		- 반복문
			while(조건문){
				실행할 코드
			}
			----------------------------
			for(초기화; 조건문; 증감){
				실행할 코드
			}
			----------------------------
			do {
				실행할 코드
			} while(조건문)
			----------------------------
			for of : 배열 데이터
			for (변수명 of 배열) {
				실행할 코드
			}
			----------------------------
			for in : 객체 데이터
			for (변수명 in 객체) {
				실행할 코드
			}

		- 반복 강제 중지
			break : 완전 종료
			continue : 일시 종료

	6) 함수(Function)
		- 모듈화(재사용, 유지보수)
		- 사용자 정의 함수 (User Define Function)
		- 기성 함수
		************** BASIC ****************************************
		a) 함수 작성 문법
			function 함수명( ) {
				코드
			}
		
		b) 호출 방식
			- 인자가 없는 방식
			- 인자가 있는 방식
			- 반환값이 있는 방식
				return : 
					- 값을 반환(반드시 1개만 리턴 가능)
					- 함수를 강제 종료
		*****************************************************************			
		
		- 자료형으로서의 function

		- 함수 작성 문법
			a) Function Declaration
				function 함수명( ) {  코드 }

			b) Function Expression (익명함수)
				변수명 = function( ) { 코드 }
				변수명( )

			- 호이스팅(Hoisting)
				함수가 선언되어 있는 코드를 유효한 범위 내에서 제일 상위로
				끌어 올려서 동작하게 하는 개념

		- 매개변수
			a) Default Value
			b) 객체의 구조 분해 할당
			c) 배열의 구조 분해 할당
			d) 나머지 매개변수

		- 함수 작성 문법(세번째)
			Arrow Function(화살표 함수)
			------------------------------------
			function sum() { 코드 }
			const sum = function() {코드}
			const sum = ()=>{ 코드 }
			------------------------------------
			const a = () => {} : 매개변수가 없을 때는 ( ) 생략 불가
			const a = x => {} : 매개변수가 1개일 때 ( ) 생략 가능
			const a = (x, y) => {} : 매개변수가 2개 이상일 경우 ( ) 생략 불가

			const a = x => {return x*x}
			const a = x => x*x : return을 생략할 때에는 { } 도 생략해야 한다.
			const a = x => {
				console.log(x*x)
				return x*x
			} : 이럴 때는  { }와 return 생략 불가

			const a = () => { return {x:1} }
			const a = () => {x:1} : 이것은 오류
			const a = () => ({x:1}) : 이것은 가능
			
			const a = () => { return [1, 2, 3] }
			const a = () => [1, 2, 3]

		- 콜백 함수
			함수가 실행될 때 인자로 들어가는 또 다른 함수

		- 재귀(recursive) 함수
			function a(){
				...
				a()
			}

			a()
		
		- 내장(built-in) 함수
			메시지 관련 함수
				window.prompt()
				window.alert()
				window.confirm()

			변환 함수
				Number(), String()
				parseInt(), parseFloat()
				eval()

			그외
				isFinite(), isNaN()
				escape(), unescape()
					알파벳과 숫자 및 * @ - _ + . / 를 제외한 문자를 모두 16진수로
					바꾸어주거나 다시 원상태로 복구

	7) 객체
		- 객체 생성 방법
			객체명 = fucntion(파라미터) {
				this.인스턴스변수 = 파라미터
			}

			객체명.prototype.메서드명 = function(파라미터) {
				this.인스턴스변수 = 파라미터
			}

			b1 = new Object()
			b1.title = "노인과 바다"
			b1.author = "헤밍웨이"
			b1.setValue = function(t, a) {
				this.title = t
				this.author = a
			}

		- 내장 객체
			a) Array
				- length
				- concat(), join(), reverse(), sort(), slice(), ...
			b) Date
				- getFullYear(), getMonth(), getDate(), getDay(), getHour(), ...
			c) Math
				- pow(), ceil(), round(), floor(), random(), abs(), ...
			d) String
				- toLowerCase(), toUpperCase(), charAt(), concat(), indexOf(), split(), substr(), ...
			e) Screen
				- height, width, availHeight, availWidth, pixelDepth, colorDepth
			f) Window
				location
				history
				navigator
				document
					link
					anchor
					image
					layer
					form
						text
						textarea
						password
						radio
						checkbox
						button
						select
						reset
						submit

	8) DOM(Document Object Model)
		- HTML문서를 객체로 표현한 것
		- DOM API : DOM에서 사용할 수 있는 여러가지 명령어(함수)

		a) Node vs Element
			- Node : HTML 요소, 텍스트, 주석 등 모든 것을 의미
			- Element : HTML 요소를 의미

		b) 검색과 탐색
			- document.getElementById( ) : id 속성으로 검색
			- document.querySelector( ) : css 선택자로 검색
			- document.querySelectorAll( ) : css 선택자로 검색한 모든 요소
			-------------------------------------------------------------------------
			- N.parentElement : 노드의 부모요소를 반환
			- E.closest( ) : 자신을 포함한 조상 요소 중 'css선택자'와 일치하는 가장
					가까운 요소를 반환
			- N.previousSibling / N.nextSibling : 노드의 이전 형제 혹은 다음 형제노드 반환
			- E.previousElementSibling / E.nextElementSibling
			- E.children : 요소의 모든 자식 요소를 반환
			- E.firstElementChild / E.lastElementChild

		c) 생성, 조회, 수정
			- document.createElement( ) : 메모리에만 존재하는 새로운 HTML 요소를 생성하고 반환
			- E.prepend() / E.append() : 노드를 첫 번째 혹은 마지막 자식으로 삽입(여러 개 추가 가능)
			- E.remove() : 요소 제거
			- E.insertAdjacentElement() : 대상 요소의 지정한 위치에 새로운 요소를 삽입
				insertAdjacentElement(위치, 새로운 요소)
				<!-- beforebegin -->
				<div class="target">
				<!-- afterbegin -->
					내용
				<!-- beforeend -->
				</div>
				<!-- afterend -->
			- N.insertBefore(추가할 노드, 참조할 노드) 
			- N.contains(주어진 노드) : 주어진 노드가 자신을 포함한 후손인지 확인
			- N.textContent : 노드의 모든 텍스트를 얻거나 변경한다.
			- E.innerHTML
			- E.dataset : 'data-" 속성값을 얻거나 지정한다.
			- E.tagName : 요소의 태그 이름을 반환
			- E.id : 요소의 id 속성값을 얻거나 지정한다.
			- E.className : 요소의 class 속성값을 얻거나 지정한다.
			- E.getAttribute("속성명"), E.setAttribute("속성명", "값")
			- E.hasAttribute("속성명"), E.removeAttribute("속성명")
			- E.classList : 요소의 class 속성값을 제어
				.add(), .remove(), .toggle(), .contains()
			- E.style : 요소의 style 속성의 css속성값을 얻거나 지정한다.
			- window.getComputedStyle() : 요소에 적용된 스타일 객체를 반환

	9) Event 처리
		- 3가지 구성 요소
			이벤트 소스 : HTML 요소(주로 input)
			이벤트 클래스
				onclick, onblur, onfocus, onmouseover, onmouseout, onselect,
				onsubmit, onreset, onload, onunload, ondbclick, ondraddrop,
				onkeydown, onkeyup, onkeypress, onmove, onresize, ...
			이벤트 핸들러 : 함수

		- 이벤트 등록 및 해제
			addEventListener(이벤트 클래스, 이벤트 핸들러, 캡쳐 타입)
			removeEventListener(이벤트 클래스, 이벤트 핸들러, 캡쳐 타입)

		- 이벤트 정보 확인 : 매개변수를 통해서 확인

		- 기본 동작 방지 : preventDefault()

		- 버블링과 캡처링 : 이벤트 전파(Propagation) 방식

		- 이벤트 옵션
			addEventListener(이벤트 클래스, 이벤트 핸들러, 옵션)
			a) once : 핸들러를 한 번만 실행하게 해주는 옵션
			b) passive : 기본 동작과 핸들러의 실행을 분리시키는 옵션

		- 이벤트 위임(Delegation)

		- 마우스와 포인터 이벤트
			click, dblclick, mousedown, mouseup, mouseenter, mouseleave, mousemove
			contextmenu, wheel

		- 키보드 이벤트
			keydown, keyup
			focus, blur, input, change, submit, reset
















